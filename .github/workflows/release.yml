name: Release Application

on:
  workflow_run:
    workflows: ["Preflight"]
    branches: [master]
    types:
      - completed

jobs:
  check-version:
    runs-on: windows-latest
    outputs:
      tag_exists: ${{ steps.check_tag.outputs.tag_exists }}
      package_version: ${{ steps.get_version.outputs.package_version }}
    steps:
      - name: Checkout Master Branch
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Fetch All Tags
        run: git fetch --tags

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24.x"

      - name: Get Package Version
        id: get_version
        run: |
          $packageVersion = node -p "require('./frontend/package.json').version"
          echo "package_version=$packageVersion" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Check If Tag Already Exists
        id: check_tag
        run: |
          $TAG_NAME = "v${{ steps.get_version.outputs.package_version }}"
          if (git tag -l $TAG_NAME) {
            Write-Host "Tag $TAG_NAME already exists. Skipping release."
            echo "tag_exists=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "Tag $TAG_NAME does not exist. Proceeding with release."
            echo "tag_exists=false" >> $env:GITHUB_OUTPUT
          }
        shell: powershell

  build-and-release:
    needs: check-version
    runs-on: windows-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.check-version.outputs.tag_exists == 'false' }}
    permissions:
      contents: write
    steps:
      - name: Checkout Master Branch
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache Python Dependencies
        uses: actions/cache@v4
        with:
          path: venv
          key: ${{ runner.os }}-python-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install Python Dependencies
        run: |
          python -m venv venv
          venv\Scripts\python -m pip install --upgrade pip
          venv\Scripts\python -m pip install -r backend/requirements.txt
        shell: powershell

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24.x"

      - name: Cache Node.js Modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node.js Dependencies
        working-directory: .\frontend
        run: npm ci
        shell: powershell

      - name: Build Frontend
        working-directory: .\frontend
        run: npm run frontend
        shell: powershell

      - name: Build Executable
        working-directory: .\frontend
        run: npm run backend:windows
        shell: powershell

      - name: Decode and Import PFX Certificate
        run: |
          $pfx_base64 = "${{ secrets.CODE_SIGN_CERTIFICATE_PFX }}"

          $pfx_bytes = [System.Convert]::FromBase64String($pfx_base64)
          [System.IO.File]::WriteAllBytes("certificate.pfx", $pfx_bytes)
          $password = "${{ secrets.CODE_SIGN_CERTIFICATE_PASSWORD }}"
          if ($password) {
            certutil -user -f -p "$password" -importpfx certificate.pfx NoRoot
          } else {
            certutil -user -f -importpfx certificate.pfx NoRoot
          }
        shell: powershell

      - name: Sign Executable
        run: |
          $signtoolPath = (Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin" -Filter "signtool.exe" -Recurse | Select-Object -Last 1).FullName
          if (!$signtoolPath) {
            throw "signtool.exe not found!"
          }
          Write-Host "Found signtool.exe at: $signtoolPath"
          & $signtoolPath sign /f certificate.pfx /p "${{ secrets.CODE_SIGN_CERTIFICATE_PASSWORD }}" /t http://timestamp.digicert.com /fd SHA256 /v "dist/HoHatch.exe"
        shell: powershell

      - name: List Dist Directory
        run: ls dist
        shell: powershell

      - name: Create README for Release
        run: |
          mkdir release_package
          $readmeContent = "HoHatch - JPG/DDS Image Converter for Shadowverse: Worlds Beyond`r`n`r`nThank you for downloading HoHatch!`r`n`r`nRun HoHatch.exe to start the application.`r`n`r`nFor more information, please visit the official website:`r`nhttps://hohatch.draco.moe"
          Set-Content -Path "release_package/README.txt" -Value $readmeContent
        shell: powershell

      - name: Prepare Files for Packaging
        run: Copy-Item -Path "dist/HoHatch.exe" -Destination "release_package/"
        shell: powershell

      - name: Create ZIP Archive
        id: archive
        run: |
          $ARCHIVE_NAME = "HoHatch-v${{ needs.check-version.outputs.package_version }}.zip"
          Compress-Archive -Path "release_package/*" -DestinationPath $ARCHIVE_NAME
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          $packageVersion = "${{ needs.check-version.outputs.package_version }}"
          $releaseNotes = python .\scripts\generate_release_notes.py $packageVersion | Out-String
          $releaseNotes = $releaseNotes.Trim()
          echo "release_notes<<EOF" >> $env:GITHUB_OUTPUT
          echo "$releaseNotes" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ steps.archive.outputs.ARCHIVE_NAME }}"
          body: ${{ steps.generate_release_notes.outputs.release_notes }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ needs.check-version.outputs.package_version }}
          name: Release v${{ needs.check-version.outputs.package_version }}
          draft: false
          prerelease: false
