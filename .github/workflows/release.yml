name: Release Application

on:
  workflow_run:
    workflows: ["Preflight"]
    branches: [master]
    types:
      - completed

jobs:
  check-version:
    runs-on: windows-latest
    outputs:
      tag_exists: ${{ steps.check_tag.outputs.tag_exists }}
      package_version: ${{ steps.get_version.outputs.package_version }}
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --tags

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.x'

      - name: Install Node.js dependencies
        working-directory: .\frontend
        run: npm install

      - name: Get package version
        id: get_version
        run: |
          $packageVersion = (node -p "require('./frontend/package.json').version")
          echo "package_version=$packageVersion" >> $env:GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          $TAG_NAME = "v${{ steps.get_version.outputs.package_version }}"
          if ((git tag -l $TAG_NAME | Select-String -Pattern $TAG_NAME) -ne $null) {
            Write-Host "Tag $TAG_NAME already exists. Skipping release."
            echo "tag_exists=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "Tag $TAG_NAME does not exist. Proceeding with release."
            echo "tag_exists=false" >> $env:GITHUB_OUTPUT
          }

  build-and-release:
    needs: check-version
    runs-on: windows-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.check-version.outputs.tag_exists == 'false' }}
    permissions:
      contents: write
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        run: |
          python -m venv venv
          .\venv\Scripts\pip install -r requirements.txt

      - name: Install Node.js dependencies
        working-directory: .\frontend
        run: npm install

      - name: Build frontend
        working-directory: .\frontend
        run: npm run frontend

      - name: Build executable
        working-directory: .\frontend
        run: npm run backend:windows
        shell: cmd

      - name: List dist directory
        run: ls dist

      - name: Create README for release
        run: |
          mkdir release_package
          $readmeContent = "HoHatch - JPG/DDS Image Converter for Shadowverse: Worlds Beyond`r`n`r`nThank you for downloading HoHatch!`r`n`r`nRun HoHatch.exe to start the application.`r`n`r`nFor more information, please visit the official website:`r`nhttps://hohatch.draco.moe"
          Set-Content -Path "release_package/README.txt" -Value $readmeContent
        shell: powershell

      - name: Prepare files for packaging
        run: Copy-Item -Path "dist/HoHatch.exe" -Destination "release_package/"
        shell: powershell

      - name: Create ZIP archive
        id: archive
        run: |
          $ARCHIVE_NAME = "HoHatch-v${{ needs.check-version.outputs.package_version }}.zip"
          Compress-Archive -Path "release_package/*" -DestinationPath $ARCHIVE_NAME
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.package_version }}
          release_name: Release v${{ needs.check-version.outputs.package_version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.archive.outputs.ARCHIVE_NAME }}
          asset_name: ${{ steps.archive.outputs.ARCHIVE_NAME }}
          asset_content_type: application/zip
