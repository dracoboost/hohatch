name: Release Application

on:
  workflow_run:
    workflows: ["Preflight"]
    branches: [master]
    types:
      - completed

jobs:
  check-version:
    runs-on: windows-latest
    outputs:
      tag_exists: ${{ steps.check_tag.outputs.tag_exists }}
      package_version: ${{ steps.get_version.outputs.package_version }}
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --tags

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.x'

      - name: Get package version
        id: get_version
        run: |
          $packageVersion = (node -p "require('./frontend/package.json').version")
          echo "package_version=$packageVersion" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Check if tag already exists
        id: check_tag
        run: |
          $TAG_NAME = "v${{ steps.get_version.outputs.package_version }}"
          if ((git tag -l $TAG_NAME | Select-String -Pattern $TAG_NAME) -ne $null) {
            Write-Host "Tag $TAG_NAME already exists. Skipping release."
            echo "tag_exists=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "Tag $TAG_NAME does not exist. Proceeding with release."
            echo "tag_exists=false" >> $env:GITHUB_OUTPUT
          }
        shell: powershell

  build-and-release:
    needs: check-version
    runs-on: windows-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.check-version.outputs.tag_exists == 'false' }}
    permissions:
      contents: write
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: venv
          key: ${{ runner.os }}-python-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install Python dependencies
        run: |
          python -m venv venv
          venv\Scripts\python -m pip install --upgrade pip
          venv\Scripts\python -m pip install -r requirements.txt
        shell: powershell

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.x'

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node.js dependencies
        working-directory: .\frontend
        run: npm ci
        shell: powershell

      - name: Build frontend
        working-directory: .\frontend
        run: npm run frontend
        shell: powershell

      - name: Build executable
        working-directory: .\frontend
        run: npm run backend:windows
        shell: powershell

      - name: Decode and import PFX certificate
        run: |
          $pfx_base64 = "${{ secrets.CODE_SIGN_CERTIFICATE_PFX }}"
          $pfx_bytes = [System.Convert]::FromBase64String($pfx_base64)
          [System.IO.File]::WriteAllBytes("certificate.pfx", $pfx_bytes)
          $password = "${{ secrets.CODE_SIGN_CERTIFICATE_PASSWORD }}"
          if ($password) {
            certutil -f -p "$password" -importpfx certificate.pfx NoRoot
          } else {
            certutil -f -importpfx certificate.pfx NoRoot
          }
        shell: powershell

      - name: Sign executable
        run: |
          $signtoolPath = (Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin" -Filter "signtool.exe" -Recurse | Select-Object -Last 1).FullName
          if (!$signtoolPath) {
            throw "signtool.exe not found!"
          }
          Write-Host "Found signtool.exe at: $signtoolPath"
          & $signtoolPath sign /f certificate.pfx /p "${{ secrets.CODE_SIGN_CERTIFICATE_PASSWORD }}" /t http://timestamp.digicert.com /fd SHA256 /v "dist/HoHatch.exe"
        shell: powershell

      - name: List dist directory
        run: ls dist
        shell: powershell

      - name: Create README for release
        run: |
          mkdir release_package
          $readmeContent = "HoHatch - JPG/DDS Image Converter for Shadowverse: Worlds Beyond`r`n`r`nThank you for downloading HoHatch!`r`n`r`nRun HoHatch.exe to start the application.`r`n`r`nFor more information, please visit the official website:`r`nhttps://hohatch.draco.moe"
          Set-Content -Path "release_package/README.txt" -Value $readmeContent
        shell: powershell

      - name: Prepare files for packaging
        run: Copy-Item -Path "dist/HoHatch.exe" -Destination "release_package/"
        shell: powershell

      - name: Create ZIP archive
        id: archive
        run: |
          $ARCHIVE_NAME = "HoHatch-v${{ needs.check-version.outputs.package_version }}.zip"
          Compress-Archive -Path "release_package/*" -DestinationPath $ARCHIVE_NAME
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.package_version }}
          release_name: Release v${{ needs.check-version.outputs.package_version }}
          draft: true
          prerelease: false

      - name: Generate release notes
        uses: actions/github-script@v6
        id: generate_release_notes
        with:
          script: |
            const { readFileSync } = require('fs');
            const changelog = readFileSync('./frontend/CHANGELOG.md', 'utf8');
            const version = process.env.PACKAGE_VERSION;
            const regex = new RegExp('## \\[' + version + '\\] - (\\d{4}-\\d{2}-\\d{2})\\n([\\s\\S]*?)(?=## [\\d+.\\d+.\\d+]|$)\\n');
            const match = changelog.match(regex);
            if (match) {
              core.setOutput('release_notes', match[2].trim());
            } else {
              core.setOutput('release_notes', 'No release notes found for this version.');
            }
        env:
          PACKAGE_VERSION: ${{ needs.check-version.outputs.package_version }}

      - name: Update Release with Notes
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }},
              body: `${{ steps.generate_release_notes.outputs.release_notes }}`
            })

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.archive.outputs.ARCHIVE_NAME }}
          asset_name: ${{ steps.archive.outputs.ARCHIVE_NAME }}
          asset_content_type: application/zip
